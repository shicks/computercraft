local geo = require('geo')
local P = geo.P

describe('geo.P', function()
  it('should respect equality', function()
    expect(P(1, 2, 3), is(P(1, 2, 3)))
    expect(P(1, 2, 3), ~is(P(1, 2, 4)))
  end)
  it('should have a reasonable :str', function()
    expect(P(1, 2, 3):str(), is('(1, 2, 3)'))
  end)
  it('should add', function()
    expect(P(1, 2, 3) + P(1, 3, 5), is(P(2, 5, 8)))
  end)

  it('should subtract', function()
    expect(P(1, 3, 5) - P(1, 2, 3), is(P(0, 1, 2)))
  end)

  it('should unary minus', function()
    expect(-P(0, 1, -2), is(P(0, -1, 2)))
  end)

  it('should return x/y/z', function()
    local p = P(1, 3, 6)
    expect(p.x, is(1))
    expect(p.y, is(3))
    expect(p.z, is(6))
  end)
end)

describe('geo.Dir', function()
  it('should parse', function()
    expect(geo.Dir('U'), is(geo.up))
    expect(geo.Dir('D'), is(geo.dn))
    expect(geo.Dir('W'), is(geo.west))
    expect(geo.Dir('E'), is(geo.east))
    expect(geo.Dir('N'), is(geo.north))
    expect(geo.Dir('S'), is(geo.south))
  end)

  it('should express relationships', function()
    expect(geo.dn.opp, is(geo.up))
    expect(geo.north.right, is(geo.east))
    expect(geo.north.left, is(geo.west))
    expect(geo.east.back, is(geo.west))
  end)
end)
